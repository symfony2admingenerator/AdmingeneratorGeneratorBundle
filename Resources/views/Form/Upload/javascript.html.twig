<script type="text/javascript">
    $(document).ready(function(){
        var fileupload = $('#{{ id ~ '_widget_container' }}');
        
        $.widget('blueimp.fileupload', $.blueimp.fileupload, {
            options: {},
            _hasError: function (file) {
                if (file.error) {
                    return file.error;
                }
                if (this.options.maxNumberOfFiles < 0) {
                    return '{{ 'upload.errors.maxNumFiles'|trans({}, 'Admingenerator') }}';
                }
                if (!(this.options.acceptFileTypes.test(file.type) ||
                        this.options.acceptFileTypes.test(file.name))) {
                    return '{{ 'upload.errors.typeNotAllowed'|trans({}, 'Admingenerator') }}';
                }
                if (this.options.maxFileSize &&
                        file.size > this.options.maxFileSize) {
                    return '{{ 'upload.errors.maxFileSize'|trans({}, 'Admingenerator') }}';
                }
                if (typeof file.size === 'number' &&
                        file.size < this.options.minFileSize) {
                    return '{{ 'upload.errors.minFileSize'|trans({}, 'Admingenerator') }}';
                }
                return null;
            },
            _initButtonBarEventHandlers: function () {
                var fileUploadButtonBar = this.element.find('.fileupload-buttonbar'),
                    filesList = this.options.filesContainer;
                this._on(fileUploadButtonBar.find('.start'), {
                    click: function (e) {
                        e.preventDefault();
                        filesList.find('.start button').click();
                    }
                });
                this._on(fileUploadButtonBar.find('.cancel'), {
                    click: function (e) {
                        e.preventDefault();
                        filesList.find('.cancel button').click();
                    }
                });
                this._on(fileUploadButtonBar.find('.delete'), {
                    click: function (e) {
                        e.preventDefault();
                        if(confirm('{{ 'batch.delete.confirm'|trans({}, 'Admingenerator') }}')) {
                            filesList.find('.delete input:checked')
                                .parent().siblings('button').click();
                            fileUploadButtonBar.find('.toggle')
                                .prop('checked', false);
                        }
                    }
                });
                this._on(fileUploadButtonBar.find('.toggle'), {
                    change: function (e) {
                        filesList.find('.delete input').prop(
                            'checked',
                            $(e.currentTarget).is(':checked')
                        );
                    }
                });
            },
        });
        
        $(fileupload).fileupload({
            fileInput:          $('#{{ id }}'),
            replaceFileInput:   false,
            uploadTemplateId:   '{{ id ~ '_upload_template' }}',
            downloadTemplateId: '{{ id ~ '_download_template' }}',
            filesContainer:     $('#{{ id ~ '_files_list' }}'),
            dropZone:           $('#{{ id ~ '_widget_container' }}'),
            pasteZone:          $('#{{ id ~ '_widget_container' }}'),
            destroy: function (e, data) {
                var that = $(this).data('fileupload');
                that._adjustMaxNumberOfFiles(1);
                that._transition(data.context).done(
                    function () {
                        $(this).remove();
                        that._trigger('destroyed', e, data);
                    }
                );
            },
        });

        $(fileupload).fileupload('option', {
            {% if maxNumberOfFiles %}maxNumberOfFiles: {{ maxNumberOfFiles }},{% endif %}
            {% if maxFileSize %}maxFileSize: {{ maxFileSize }},{% endif %}
            {% if minFileSize %}minFileSize: {{ minFileSize }},{% endif %}
            {% if acceptFileTypes %}acceptFileTypes: {{ acceptFileTypes }},{% endif %}
            previewSourceFileTypes:   {{ previewSourceFileTypes }},
            previewSourceMaxFileSize: {{ previewSourceMaxFileSize }},
            previewMaxWidth:          {{ previewMaxWidth }},
            previewMaxHeight:         {{ previewMaxHeight }},
            {% if not previewAsCanvas %}previewAsCanvas: false,{% endif %}
            {% if prependFiles %}prependFiles: true,{% endif %}
        });
        
        // Create JSON array for existing files
        var result = [
            {% for key, item in form.vars.data -%}
            {
              "name":             "{{ item.name }}",
              "size":             {{ item.size }},
              "url":              "{{ vich_uploader_asset(item, 'file') }}",
            {% if item.preview %}
                {% if thumbnailGenerator and thumbnailFilter %}
                    {% if thumbnailGenerator is sameas('avalanche') %}
                        "thumbnail_url":    "{{ vich_uploader_asset(item, 'file')|apply_filter(thumbnailFilter) }}",
                    {% endif %}
                {% elseif item.size < previewSourceMaxFileSize %}
                  "thumbnail_url":    "{{ vich_uploader_asset(item, 'file') }}",
                {% endif %}
            {% endif %}
              "count":            "{{ key }}",
            }
            {%- if not loop.last %},{% endif %}
            {% endfor %}
        ]; // end of JSON array
        
        // Load existing files:
        $(fileupload).fileupload('option', 'done').call(fileupload, null, {result: result});        
    });
</script>