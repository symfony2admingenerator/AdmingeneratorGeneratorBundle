{% extends '../CommonAdmin/ListAction/ListBuilderAction.php.twig' %}
{% block pager_adapter -%}
use Pagerfanta\Adapter\DoctrineODMMongoDBAdapter as PagerAdapter;
{% endblock %}
{% block setFilters -%}
    /**
     * Store in the session service the current filters
     *
     * @param array the filters
     */
    protected function setFilters($filters)
    {

        {%- for filter in builder.filters.display -%}
            {%- if 'document' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}
            {% set filterModel = builder.getFieldGuesser().getModelType(model, filter) %}
        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = array (
                    'id' => $filters['{{ filter }}']->get{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel)|capitalize }}(),
                    'documentName' => '{{ filterModel }}'
                );
        }

            {%- endif %}

        {% endfor -%}

        $this->get('session')->set('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', $filters);
    }
{% endblock %}

{% block getFilters -%}
    /**
     * Get filters from session
     */
    protected function getFilters()
    {
        $filters = $this->get('session')->get('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', array());

        {%- for filter in builder.filters.display -%}
            {%- if 'document' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = $this->getDoctrineMongoDB()->getRepository($filters['{{ filter }}']['documentName'])->find($filters['{{ filter }}']['id']);
        }

            {%- endif %}

        {% endfor -%}

        return $filters;
    }
{% endblock %}
{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->buildQuery();

        $this->processQuery($query);
        $this->processSort($query);
        $this->processFilters($query);
        $this->processScopes($query);

        return $query;
    }

    protected function buildQuery()
    {
        return $this->getDocumentManager()
                      ->createQueryBuilder('{{ model }}');
    }

{% endblock %}

{% block processSort -%}
    protected function processSort($query)
    {
        if ($this->getSortColumn()) {
            if (!strstr($this->getSortColumn(), '.')) { //direct column
                $query->sort($this->getSortColumn(), $this->getSortOrder());
            } else {
                /* TODO FOR MONGO
                list($table, $column) = explode('.', $this->getSortColumn(), 2);
                $this->addJoinFor($table, $query);
                $query->sort($this->getSortColumn(), $this->getSortOrder());*/
            }
        }
    }
{% endblock %}

{% block addJoinFor -%}
    protected function addJoinFor($table, $query)
    {
        $query->leftJoin('q.'.$table, $table);
    }
{% endblock %}

{% block processFilters -%}
    protected function processFilters($query)
    {
        $filtersData = $this->getFilters();

        $queryFilter = $this->getQueryFilter();
        $queryFilter->setQuery($query);

        {% for filter in builder.filterColumns %}

        if (isset($filtersData['{{ filter.name }}']) && null !== $filtersData['{{ filter.name }}']) {
            $queryFilter->add{{ filter.dbType|classify }}Filter('{{ filter.filterOn }}', $filtersData['{{ filter.name }}']);
        }
        {% endfor %}

    }
{% endblock %}

{% block processScopes -%}
    protected function processScopes($query)
    {
    {% if scopes is defined -%}
        $scopes = $this->getScopes();

        $queryFilter = $this->getQueryFilter();
        $queryFilter->setQuery($query);


        {% for groupName, group in scopes -%}
            {%- for scopeName, params in group %}

        if (isset($scopes['{{ groupName }}']) && $scopes['{{ groupName }}'] == '{{ scopeName }}') {
            {% if params["filters"] is defined -%}
                {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
                $this->scope{{ filterParams|classify }}($queryFilter);
                {%- else -%}
                $queryFilter->addDefaultFilter('{{ filter }}', {{ filterParams|as_php }});
                {%- endif -%}
                {%- endfor -%}
            {%- endif %}

        }
            {% endfor -%}
        {%- endfor -%}
    {%- endif %}
    }

    {% if scopes is defined -%}
    {% for groupName, group in scopes -%}
        {%- for scopeName, params in group %}
            {% if params["filters"] is defined -%}
            {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
    /**
     * Add the filters to the query for {{ groupName }} => {{ scopeName }}
     *
     * @param queryFilter the queryFilter
     */
    protected function scope{{ filterParams|classify }}($query)
    {
    }
                {%- endif -%}
            {%- endfor -%}
            {%- endif -%}
        {% endfor -%}
    {%- endfor -%}
    {%- endif %}
{% endblock %}

{% block getQueryFilter %}
    /**
     * @return \Admingenerator\GeneratorBundle\QueryFilter\QueryFilterInterface
     */
    protected function getQueryFilter()
    {
        return $this->get('admingenerator.queryfilter.doctrine_odm');
    }
{% endblock %}
