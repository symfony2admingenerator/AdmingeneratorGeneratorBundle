{% use '../CommonAdmin/security_action.php.twig' %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\{{ builder.generator.GeneratedControllerFolder }};

{{- block('security_use') }}

{{- block('csrf_protection_use') }}

use Symfony\Component\DependencyInjection\Exception\ServiceNotFoundException;
use Symfony\Component\PropertyAccess\PropertyAccess;

/**
 * @author Bob van de Vijver
 */
class ExcelController extends ListController
{
    /**
     * Generates the Excel object and send a streamed response
     * @return \Symfony\Component\HttpFoundation\StreamedResponse
     */
    public function excelAction()
    {
        {{ block('security_action') }}
      
        // Create the PHPExcel object with some standard values
        try {
            $phpexcel = $this->get('phpexcel');
        } catch (ServiceNotFoundException $e){
            throw new \Exception('You will need to enable the PHPExcel bundle for this function to work.', null, $e);
        }
        $phpExcelObject = $phpexcel->createPHPExcelObject();
        $this->createExcelObject($phpExcelObject);
        $sheet = $phpExcelObject->setActiveSheetIndex(0);

        // Create the first bold row in the Excel spreadsheet
        $this->createExcelHeader($sheet);

        // Print the data
        $this->createExcelData($sheet);

        // Create the Writer, Response and add header
        $writer = $phpexcel->createWriter($phpExcelObject, '{{ builder.filetype }}');
        $response = $phpexcel->createStreamedResponse($writer);
        $response->headers->set('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=utf-8');
        $response->headers->set('Content-Disposition', 'attachment;filename={{ builder.filename }}.xlsx');

        return $response;
    }

    /**
     * Override this method to add your own creator, title and more to the Excel spreadsheet
     */
    protected function createExcelObject(\PHPExcel $phpExcelObject)
    {
        $phpExcelObject->getProperties()->setCreator("AdminGeneratorBundle")
            ->setTitle('AdminGenerator Excel Export')
            ->setSubject("AdminGenerator Excel Export")
            ->setDescription("AdminGenerator Excel export");
    }

    /**
     * Fill the Excel speadsheet with the headers
     */
    protected function createExcelheader(\PhpExcel_Worksheet $sheet)
    {
    {% set colNum = 0 %}
    {% for column in builder.columns %}
        $sheet->setCellValueByColumnAndRow({{ colNum }}, 1, "{{ column.label }}", true);
        $columnLetter = \PHPExcel_Cell::stringFromColumnIndex({{ colNum }});
        $sheet->getStyle($columnLetter . '1')->getFont()->setBold(true);
        $sheet->getColumnDimension($columnLetter)->setAutoSize(true);
    {% set colNum = colNum + 1 %}
    {% endfor %}
    }

    /**
     * Gets the value from the given field that will be place at an Excel cell
     *
     * @param string $field   The name of the field to extract the value
     * @param mixed  $rowData The main entity object
     *
     * @return $data The data to place on the respective Excel cell
     */
    protected function getValueForCell($field, $rowData)
    {
        $accessor = PropertyAccess::createPropertyAccessor();
        $data = $rowData;
        // Retrieve relations
        while (($pos = strpos($field, '.')) > 0) {
            $field = substr($field, $pos + 1);
            $data = $accessor->getValue($data, substr($field, 0, $pos));
        }
        $data = $accessor->getValue($data, $field);

        // Convert DateTime object to given format
        if ($data instanceof \DateTime) {
            $data = $data->format('{{ builder.dateTimeFormat }}');
        }

        return $data;
    }

    /**
     * Fills the Excel spreadsheet with data
     */
    protected function createExcelData(\PhpExcel_Worksheet $sheet)
    {
        $row = 2;
        $results = $this->getResults();
        foreach($results as $rowData) {
          {%- set column = 0 -%}
          {%- for builder_column in builder.columns %}

            if (method_exists($this, 'format{{ (builder_column.getter|classify)|php_name }}Value')) {
                $data = $this->format{{ (builder_column.getter|classify)|php_name }}Value($rowData);
            } else {
                $data = $this->getValueForCell('{{ builder_column.getter }}', $rowData);
            }
            $sheet->setCellValueByColumnAndRow({{ column }}, $row, $data);
            {% set column = column + 1 %}
          {%- endfor %}

            $row++;
        }
    }

    {% block getResults -%}
        protected function getResults()
        {
            // ORM JOB
        }
    {% endblock %}
}
