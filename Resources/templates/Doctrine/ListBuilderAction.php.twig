{% extends '../CommonAdmin/ListAction/ListBuilderAction.php.twig' %}
{% block setFilters -%}
    /**
     * Store in the session service the current filters
     *
     * @param array the filters
     */
    protected function setFilters($filters)
    {

        {%- for filter in builder.filters.display -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = array (
                    'id' => $filters['{{ filter }}']->getId(),
                    'entityName' => get_class($filters['{{ filter }}'])
                );
        }

            {%- endif %}

        {% endfor -%}

        $this->get('session')->set('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', $filters);
    }
{% endblock %}

{% block getFilters -%}
    /**
     * Get filters from session
     */
    protected function getFilters()
    {
        $filters = $this->get('session')->get('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', array());

        {%- for filter in builder.filters.display -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = $this->getDoctrine()->getRepository($filters['{{ filter }}']['entityName'])->find($filters['{{ filter }}']['id']);
        }

            {%- endif %}

        {% endfor -%}

        return $filters;
    }
{% endblock %}

{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->getDoctrine()
                    ->getEntityManager()
                    ->createQueryBuilder()
                    ->select('q')
                    ->from('{{ model }}', 'q');

        $this->processSort($query);
        $this->processFilters($query);
        {% if scopes is defined %}
        $this->processScopes($query);
        {% endif %}

        return $query->getQuery();
    }
{% endblock %}

{% block processSort -%}
    protected function processSort($query)
    {
        if ($this->getSortColumn()) {
            if (!strstr($this->getSortColumn(), '.')) { //direct column
                $query->orderBy('q.'.$this->getSortColumn(), $this->getSortOrder());
            } else {
                list($table, $column) = explode('.', $this->getSortColumn(), 2);
                $this->addJoinFor($table, $query);
                $query->orderBy($this->getSortColumn(), $this->getSortOrder());
            }
        }
    }
{% endblock %}

{% block getFilterForm -%}
    protected function getFilterForm()
    {
        $filters = $this->getFilters();

        {%- for filter in builder.filters.display -%}
            {%- if 'entity' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
            $this->getDoctrine()->getEntityManager()->getUnitOfWork()->registerManaged($filters['{{ filter }}'], array($filters['{{ filter }}']->getId()), array());
        }

            {%- endif %}

        {% endfor -%}

        return $this->createForm($this->getFiltersType(), $filters);
    }
{% endblock %}

{% block addJoinFor -%}
    protected function addJoinFor($table, $query)
    {
        $query->leftJoin('q.'.$table, $table);
    }
{% endblock %}

{% block processFilters -%}
    protected function processFilters($query)
    {
        $filterObject = $this->getFilters();

        $queryFilter = $this->get('admingenerator.queryfilter.doctrine');
        $queryFilter->setQuery($query);

        {% for filter in builder.filterColumns %}
            if (isset($filterObject['{{ filter.name }}']) && null !== $filterObject['{{ filter.name }}']) {
                $queryFilter->add{{ filter.dbType|classify }}Filter("{{ filter.filterOn }}", $filterObject['{{ filter.name }}']);
            }
        {% endfor %}

    }
{% endblock %}

{% block processScopes -%}
    {% if scopes is defined %}
    protected function processScopes($query)
    {
        $scopes = $this->getScopes();

        $queryFilter = $this->get('admingenerator.queryfilter.doctrine');
        $queryFilter->setQuery($query);


        {% for groupName, group in scopes -%}
            {%- for scopeName, params in group %}

        if (isset($scopes['{{ groupName }}']) && $scopes['{{ groupName }}'] == '{{ scopeName }}') {
            {% if params["filters"] is defined -%}
                {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
                $this->scope{{ filterParams|classify }}($queryFilter);
                {%- else -%}
                $queryFilter->addDefaultFilter("{{ filter }}", {{ filterParams|as_php }});
                {%- endif -%}
                {%- endfor -%}
            {%- endif %}

        }
            {% endfor -%}
        {%- endfor %}
    }

    {% for groupName, group in scopes -%}
        {%- for scopeName, params in group %}
            {% if params["filters"] is defined -%}
            {%- for filter, filterParams in params["filters"] -%}
                {%- if filter|is_numeric -%}
    /**
    * Add the filters to the query for {{ groupName }} => {{ scopeName }}
    *
    * @param queryFilter the queryFilter
    */
    protected function scope{{ filterParams|classify }}($query)
    {
    }

                {%- endif -%}
            {%- endfor -%}
            {%- endif -%}
        {% endfor -%}
    {%- endfor -%}
    {%- endif %}
{% endblock %}


{% block doBatchDelete -%}
    protected function doBatchDelete(array $ids)
    {
        if ($this->getDoctrine()
            ->getEntityManager()
            ->createQuery(sprintf('delete from {{ model }} q where q.{{ builder.ModelPrimaryKeyName }} IN (%s)', implode(',', $ids)))
            ->execute()) {
            $this->get('session')->setFlash('success', $this->get('translator')->trans("{{ "batch.deleted.success" }}", array(), 'Admingenerator') );
        } else {
            $this->get('session')->setFlash('error', $this->get('translator')->trans("{{ "batch.deleted.error" }}", array(), 'Admingenerator') );
        }
    }
{% endblock %}
