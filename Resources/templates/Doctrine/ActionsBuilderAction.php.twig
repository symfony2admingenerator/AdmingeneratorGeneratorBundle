{% extends '../CommonAdmin/ActionsAction/ActionsBuilderAction.php.twig' %}

{% block getObject %}
    /**
     * Get object \{{ model }} with identifier $pk
     *
     * @param mixed $pk
     * @return \{{ model }}
     */
    protected function getObject($pk)
    {
        ${{ builder.ModelClass }} = $this->getObjectQuery($pk)->getOneOrNullResult();

        if (!${{ builder.ModelClass }}) {
            throw new \InvalidArgumentException("No {{ model }} found on {{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }} : $pk");
        }

        return ${{ builder.ModelClass }};
    }

{% endblock %}

{% block getQuery -%}
    /**
     * Get query from query builder
     *
     * @param mixed $pk
     * @return Doctrine\ORM\Query
     */
    protected function getObjectQuery($pk)
    {
        return $this->getObjectQueryBuilder($pk)->getQuery();
    }

    /**
     * Creates a QueryBuilder instance filtering on {{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }}
     * property.
     *
     * @param mixed $pk
     * @return Doctrine\ORM\QueryBuilder
     */
    protected function getObjectQueryBuilder($pk)
    {
        return $this->getDoctrine()
             ->getManagerForClass('{{ model }}')
             ->getRepository('{{ model }}')
             ->createQueryBuilder('q')
             ->where('q.{{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }} = :pk')
             ->setParameter(':pk', $pk);
    }
{% endblock %}

{% block executeObjectDelete %}

    protected function executeObjectDelete(\{{ model }} ${{ builder.ModelClass }})
    {
        $em = $this->getDoctrine()->getManagerForClass('{{ model }}');
        $em->remove(${{ builder.ModelClass }});
        $em->flush();
        $em->clear();
    }

{% endblock %}

{% block executeBatchDelete %}

    protected function executeBatchDelete(array $selected)
    {
        $this->getDoctrine()->getManagerForClass('{{ model }}')
            ->createQuery('DELETE {{ model }} m WHERE m.{{ builder.getFieldGuesser().getModelPrimaryKeyName(model) }} IN (:selected)')
            ->setParameter('selected', $selected)
            ->getResult();
    }

{% endblock %}